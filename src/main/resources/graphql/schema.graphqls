type User {
    username: String
    email: String
}

type Category {
    id: Int
    name: String
    colourHex: String
    description: String
}

type Merchant {
    id: Int
    name: String
    description: String
    defaultCategory: Category
}

type Query {
    greeting: String!
    category(passwordHash: String!, id: Int!): CategoryPayload!
    categories(passwordHash: String!): CategoriesPayload!
    merchant(passwordHash: String!, id: Int!): MerchantPayload
    merchants(passwordHash: String!): MerchantsPayload
}

type Mutation {
    createUser(username: String!, password: String!, email: String!): CreateUserPayload!
    deleteUser(passwordHash: String!): DeleteUserPayload!
    createCategory(passwordHash: String!, name: String!, colourHex: String!, description: String): CategoryPayload!
    deleteCategory(passwordHash:String!, id:Int!): DeleteCategoryPayload!
    createMerchant(passwordHash: String!, name: String!, description: String, defaultCategoryId: Int): MerchantPayload!
    deleteMerchant(passwordHash:String!, id:Int!): DeleteMerchantPayload!
}

type FailurePayload {
    exceptionName: String
    errorMessage: String
}

type DeleteSuccess {
    successMessage: String
}

union CreateUserPayload = CreateUserSuccess | FailurePayload

type CreateUserSuccess {
    user: User!
}

union DeleteUserPayload = DeleteSuccess | FailurePayload

union CategoryPayload = CategorySuccess | FailurePayload

type CategorySuccess {
    category: Category!
}

union CategoriesPayload = CategoriesSuccess | FailurePayload

type CategoriesSuccess {
    categories: [Category]!
}

union DeleteCategoryPayload = DeleteSuccess | FailurePayload

union MerchantPayload = MerchantSuccess | FailurePayload

type MerchantSuccess {
    merchant: Merchant!
}

union MerchantsPayload = MerchantsSuccess | FailurePayload

type MerchantsSuccess {
    merchants: [Merchant]!
}

union DeleteMerchantPayload = DeleteSuccess | FailurePayload
